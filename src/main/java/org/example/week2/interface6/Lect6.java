package org.example.week2.interface6;

public class Lect6 {
    public static void main(String[] args) {

        ///  학습 키워드
        //- [ ]  인터페이스 - 클래스 설계 표준
        //- [ ]  구현체 - 인터페이스를 구현한 클래스

        /// 인터페이스(interface)란?
        // - 인터페이스는 설계 `표준`입니다.
        //- 클래스가 따라야할 최소한의 공통 규칙을 정의하는 역할을 합니다.

        ///  인터페이스를 사용하는 이유
        //- 모든 설계에 **`표준`**이 있는 이유와 똑같습니다.
        //- 개발자마다 서로 다른 방식으로 메서드를 만든다면 일관성이 깨질 수 있습니다.
        //- 인터페이스를 활용해서 최소한의 규격을 정의합니다.
        //- 세부 구현은 각 클래스에 맡깁니다.
        //- 일관성을 유지하면서 클래스가 고유한 특색을 확장할 수 있도록 돕습니다.

        // 인스턴스화
        LuxuryCar luxuryCar = new LuxuryCar();
        SpeedCar speedCar = new SpeedCar();

        // 활용


        // ❌ 일관되지 않은 주행 명령어
//        luxuryCar.move();
//        luxuryCar.stop();
//        // ❌ 일관되지 않은 주행 명령어 + 멈출수 없음
//        speedCar.move();
//        speedCar.stop();
//        speedCar.drive();

        ///  인터페이스 적용
        // 인터페이스의 활용
        //- 인터페이스는 모든 클래스가 지켜야 할 최소한의 규칙을 정의합니다.
        //- 클래스에서 `implements` 키워드로 인터페이스를 활용할 수 있습니다.
        //- 인터페이스를 구현한 클래스를 `구현체` 라고 합니다.

        /// 인터페이스
        // ✅ 각 차량의 공통 기능
        luxuryCar.drive();
        speedCar.drive();

        luxuryCar.stop();
        speedCar.stop();


        // 인터페이스 추가 활용
        // ✅각 차량의 고유 기능
        luxuryCar.charge();
        speedCar.autoParking();

        ///  인터페이스의 다양한 기능
        // 다중구현
        // 다중상속

        /// 인터페이스 다중구현
        // 패키지 v1 참조
        //- `implements` 키워드로 다수의 인터페이스를 구현할수 있습니다.
        //- 한 개의 클래스가 여러 인터페이스(`Animal` , `Flyable`)를 구현한 경우 `다중구현` 이라고 합니다.


        /// 인터페이스 다중상속
        //- `extends` 키워드로 상속을 구현할 수 있습니다.
        //- 상속은 이후 수업에서 자세하게 다룹니다.


        ///  인터페이스에 변수를 선언하는 경우 (비권장)
        //변수 선언시 형식에 관계 없이 자동으로 상수로 선언됩니다.
        //
        //- `public static final` 로 선언됩니다.
        //- `static` 으로 선언되기 때문에 구현체 없이도 활용 가능합니다.
        //- 인터페이스는 표준의 역할이므로 변수선언은 최소화하는 것이 좋습니다.
    }
}
