package org.example.week2.polymorphism10;

public class Lect10 {
    public static void main(String[] args) {

        ///  학습 키워드
        //- [ ]  다형성 - 하나의 타입으로 여러 객체를 다룰 수 있는 기술
        //- [ ]  업 캐스팅 - 자식 → 부모
        //- [ ]  다운 캐스팅 - 부모 → 자식

        ///  다형성(Polymorphism)이란
        //- `다형성`은 하나의 타입으로 여러 객체를 다룰 수 있는 객체지향의 4번째 특징입니다.
        //- 인터페이스 상속, 클래스 상속을 활용해서 추상계층을 표현해 왔습니다.
        //- 이제 추상 계층이라는 특징을 활용해서 다형성을 구현할 수 있습니다.

        ///  인터페이스를 활용한 다형성
        // LifeForm, Animal, Cat, Dog 클래스 확인

        ///  형변환(Casting
        //- `부모타입`으로 `자식타입`을 다룰 수 있는 이유는 자동으로 `형변환(Casting)` 이 발생했기 때문입니다.
        //- 자식타입 → 부모타입: 업캐스팅(`UpCasting`)
        //- 부모타입 → 자식타입: 다운캐스팅(`DownCasting`)

        /// 업캐스팅(UpCasting) - 자식 → 부모
        //부모타입으로 자식타입을 다룰 수 있는 이유는 업캐스팅(UpCasting) 때문입니다.

        /// 업캐스팅(UpCasting)의 주의사항
        //**업캐스팅은 부모의 타입으로 데이터를 다룰 수 있지만 자식 클래스의 고유기능을 활용할 수 없습니다.**
        //- 자식 클래스의 고유 기능을 사용하려면 **`다운캐스팅`** 이 필요합니다.

        /// 다운캐스팅(DownCasting):  부모 → 자식
        //다운캐스팅으로 자식 클래스의 고유 메서드를 사용할 수 있습니다.

        /// 다운캐스팅(DownCasting)의 주의사항
        //**잘못된 다운캐스팅은 컴파일단계에서 감지할 수 없습니다.**
        //- 컴파일러는 다운캐스팅이 문법적으로 올바른지 여부만 검사해주기 때문에
        //- 런타임시에 실제 어떤 객체가 변수에 할당되는지 검사해 주지 않습니다.
        //- 컴파일 시점에는 오류 없이 통과되지만 런타임시점에 `ClassCastException` 이 발생할 가능성이 있습니다.

        ///  그래서 다운캐스팅할 때는
        //그래서 다운캐스팅을 사용할때 항상 `instanceof` 를 활용해야합니다.
        //- `instanceof` 는 객체가 특정 클래스나 인터페이스의 인스턴스인지 확인해 주는 역할을 합니다.
        //- 주로 다운캐스팅 하기 전에 타입을 검사해서 `ClassCastException` 을 예방하는데 활용됩니다.

    }
}
