package org.example.week2.static4;

public class Lect4 {
    public static void main(String[] args) {

        /// 학습 키워드
        //- [ ]  static 키워드
        //- [ ]  인스턴스 멤버(인스턴스 변수, 인스턴스 메서드)
        //- [ ]  클래스 멤버(클래스 변수, 클래스 메서드)

        /// static
        // - `static` 키워드는 모든 객체가 함께 사용하는 `변수`나 `메서드`를 만들때 사용됩니다.
        //- `객체(인스턴스)`를 만들지 않아도 클래스 이름만으로 바로 사용할 수 있습니다.
        //- 모든 객체가 같은 값을 공유합니다. → **공용 게시판**이라고 생각하시면 이해하기 쉽습니다.
        //- `static` 변수와 메서드는 한 번만 생성되고 `Method Area(메서드영역)` 에 저장됩니다.

        /// 클래스 멤버
        // static 변수, 메서드 활용
        System.out.println("static 변수: " + Person.population);
        Person.printPopulation();  // 현재 인구 수: 0

        ///  인스턴스 멤버(인스턴스 변수 + 인스턴스 메서드)
        // 인스턴스 멤버
        //- 객체를 만들때 마다 생성되는 `변수`와 `메서드` 입니다.
        //- 객체(인스턴스)를 생성한 후에만 사용할 수 있습니다.
        //- 각 객체가 개별적으로 값을 가집니다. (공유되지 않음)
        //- 인스턴스는 `Heap` 영역에 위치합니다.

        ///  인스턴스 변수
        //- 객체가 생성될 때마다 따로 만들어지는 변수입니다.
        //- 객체를 생성한 후 접근할 수 있습니다.
        //- `name` 변수는 각 객체마다 별도로 저장됩니다.

        ///  인스턴스 메서드
        //- 객체의 속성을 활용하는 메서드입니다.
        //- 객체가 생성된 후에만 사용할 수 있습니다.

        // 인스턴스 멤버 활용 - 객체 생성
        // 인스턴스 메서드는 객체 인스턴스화 이후에 호출 가능
        Person p1 = new Person();  // 생성시마다 population 1 증가
        Person p2 = new Person();  // 생성시마다 population 1 증가

        // 인스턴스 변수 활용 - 객체의 데이터에 접근
        p1.name = "훈영";
        p2.name = "소희";

        // 인스턴스 메서드 활용 - 객체의 메서드 실행
        p1.printName();
        p2.printName();

        // 클래스 메서드는 클래스 이름으로 호출가능
        Person.printPopulation();  // 현재 인구 수: 2

        ///  클래스 멤버(클래스 변수 + 클래스 메서드)
        //- 클래스 자체에 속하는 `변수`와 `메서드`를 의미합니다.
        //- `static` 키워드를 사용해서 선언합니다.
        //- 해당 클래스로 만들어진 객체가 공유해서 사용할 수 있습니다.
        //- 클래스가 로드될때 `Method Area` 에 적재됩니다.
        //- 객체 생성 없이 사용 가능합니다.


        ///  클래스 변수
        //- 클래스가 로드될 때 한 번만 생성됩니다.
        //- 모든 객체가 공유하는 변수입니다.
        //- `Heap` 이 아니라 `Method Area` 에 저장됩니다.
        //- 객체를 만들지 않아도 `클래스명.변수명`으로 접근가능합니다.

        ///  클래스 메서드
        //- 클래스에 속하는 메서드입니다.
        //- 객체 없이 사용할 수 있습니다.
        //- 클래스 변수만 사용할 수 있고 인스턴스 변수는 사용할 수 없습니다.

        ///  static 사용시 주의사항
        // 클래스 변수 사용시 주의사항
        //static 은 공유가 필요한 곳에 사용해야합니다.

        //`Static 메서드`에서는 인스턴스변수에 접근할 수 없습니다.
        //- 인스턴스 멤버를 사용하기 위해서는 먼저 객체가 생성되어야 합니다.
        //- 객체 생성없이 사용할 수 없습니다. 접근도 당연히 안됩니다.

        //static 은 꼭 필요할 때만 사용해야 합니다.
        //`static` 변수와 메모리는 프로그램이 종료될 때까지 메모리에 유지됩니다.
        //- 너무 많은 `static`  남용하면 메모리 낭비로 이어집니다.
    }
}
