package org.example.week2.jvm_memory2;

public class Lect2 {
    public static void main(String[] args) {

        /// 학습 키워드
        //- [ ]  Method Area - 클래스 정보 저장공간
        //- [ ]  Stack Area - 메서드 실행 시 사용되는 공간(지역변수, 호출정보 등)
        //- [ ]  Heap Area - 객체가 생성되어 저장되는 공간

        ///  JVM 메모리 구조
        // Method, Stack, Heap

        /// - `Method Area`(도서관 비유)
        //     - 프로그램 시작 시 정보가 저장됩니다.
        //     - 클래스 정보(`.class 파일`) 가 올라가는 곳.
        //     - 클래스의 메서드 정보, static 변수 등이 저장됩니다.
        //     - 모든 객체가 공유하는 공용 공간

        /// - `Stack Area`(접시 쌓기 비유)
        //    - 가장 위에 있는 접시를 먼저 꺼내듯 비슷한 구조로 생각하시면 됩니다.
        //    - 후입선출(LIFO) 구조 입니다. 먼저 들어온 것이 가장 늦게 나간다는 뜻입니다.
        //    - 메서드가 호출될 때마다 새로운 접시한장(스택프레임)이 쌓입니다.
        //    - 가장 위의 접시(최근 호출된 메서드)가 먼저 실행됩니다.
        //    - 메서드 실행이 끝나면 스택에서 제거됩니다.

        /// 후입선출(LIFO)
        // **LIFO(Last In First Out) - 후입선출**
        // 마지막에 들어온 요소가 제일 먼저 나가게 되는 구조를 뜻합니다.

        /// - `Heap Area`(풍선 비유)
        //    - `new` 키워드로 생성된 객체가 저장되는 곳입니다.
        //    - 객체의 실제 데이터가 저장되고 데이터의 주소는 `stack` 영역에 저장됩니다.



        /// Method(static) 이해하기
        //- 프로그램이 실행되면 여러분들이 작성했던 모든 파일(.java)의 데이터가 `Method(static)`영역에 저장됩니다.
        ////- 프로그램 실행 시점에 한번만 저장됩니다.
        //- `Method` 영역에 저장된 데이터는 프로그램 전체에서 공용으로 활용 가능합니다.
        //- 아직 `static` 키워드를 배우지 않았지만 `static` 으로 선언된 변수와 메서드들이 이 공간에 위치하게 됩니다.
        //- 이 공간에 저장된 데이터는 공용으로 사용 가능합니다.

        /// Heap 영역 이해하기
        ////// new 키워드로 생성된 객체는 Heap 영역에 저장됩니다.
        // 프로그램 실행 흐름에서 Stack 영역의 변수가 Heap 영역의 객체를
        // 참조(화살표→ 로 가리키고 있는 모습)을 꼭 확인해 봅시다.
        // 지금은 객체를 담은 변수에는 실제 객체의 Heap 메모리 주소 값이 저장되는구나
        // 라고 이해하고 넘어가셔도 충분합니다.

        // Heap 영역에 생성된 객체는 필요 없어지면 가비지 컬렉터(GC)가 정리 가능

        /// 가비지 컬렉터(Garbage Collector)
        // Java의 사용하지 않는 객체를 자동으로 제거하는 기능입니다.
        //- `new` 키워드로 생성한 객체는 `Heap` 영역에 저장됩니다.
        //- 사용이 끝난 객체는 메모리에 남아 있으면 낭비입니다.
        //- 가비지 컬랙터가 이러 불필요한 객체를 자동으로 정리해서 메모리를 확보합니다.



        /// Stack 영역 이해하기
        //- 메서드가 호출될 때마다 `Stack` 영역에 메모리가 할당됩니다.
        //- 하나의 접시(스택프레임)에 각 메서드의 지역변수가 저장됩니다.
        //- 이 영역은 접시를 쌓듯이 `LIFO-후입선출` 구조입니다.
        /////- 메서드가 시작되면 추가되고 메서드가 종료되면 사라지는 구조입니다.
        //- 특정 메서드가 실행되면 해당 메서드의 정보와 변수가 `Stack` 에 저장되고 메서드 실행이 끝나면 그 메모리는 자동으로 제거 됩니다.
        //- 메서드 내에 선언된 지역변수들이 저장되는 공간입니다.
        //→ 변수에 객체가 담기면 객체의 주소값이 저장됩니다.

    }
}
