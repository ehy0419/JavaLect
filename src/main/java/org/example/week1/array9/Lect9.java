package org.example.week1.array9;

public class Lect9 {
    public static void main(String[] args) {

        /// 학습 키워드
        //- [ ]  배열(Array)
        //    - [ ]  배열의길이
        //    - [ ]  배열의요소
        //    - [ ]  인덱스(index)
        //- [ ]  배열탐색
        //    - [ ]  향상된 for 문
        //- [ ]  2차원 배열

        ///  배열 Array
        // 배열은 비슷한 주제의 데이터들을 하나의 그룹으로 묶어서 표현하는 방법
        // 관련한 데이터를 편리하게 관리하기 위해 사용
        // 모든 자료형의 종류로 배열을 만들 수 있다.

        // 모든 모험가의 이름을 변수에 담아 관리하게 된 모험가 길드장이라면
        // 관리할 대상이 100~1000명이라면?
        // 중간 다른 데이터가 섞이면 유지 보수가 어려워진다.
        // 모험가를 명단을 관리하는 법;
//        String name1 = "gygim";
//        String name2 = "Steve";
//        String name3 = "Grace";
//        ...
//        String name1000 = "Isac";

        /// 배열
        // 다시 말하면, 배열은 비슷한 주제의 데이터를 그룹으로 묶어서 표현하는 방법
        //- 관련된 데이터를 편하게 관리하기 위해 사용됩니다.
        //- 모험가와 관련된 사람을 찾으려면 `adventurerList` 변수에 접근하기만 하면 됩니다.

//        String[] adventurerList = {"gygim", "Steve", "Grace", ... , "Isac"};

        ///  배열의 길이  (Array Length)
        // 배열의 길이는 배열에 들어갈 수 있는 데이터의 개수
        //- *배열을 만들 때 한 번 크기를 정하면 변경할 수 없습니다. (`정적배열`)
        //- 아래 문법으로 배열의 길이를 구할 수 있습니다.

        /// 배열의 길이 문법
        // 데이터의 자료형  변수이름    배열이름.length
        // int arrLenght =  adventurerList.length;


        /// 배열 선언(Array Declaration)
        // new 키워드를 사용해 배열을 선언할 수 있습니다.
        // 자료형[] 변수이름 = new 자료형[배열의길이];         // 배열선언


        /// 배열 선언의 첫 번째 방법
        //- (1)배열의 이름 과 (2)길이 설정 을 각 다른 줄에서 할 수 있습니다.
        //- `arr` 이름을 가진 배열을 선언합니다.
        //- `배열의길이` 를 설정해 줍니다.

        /// 1. 배열 선언 (정수형 배열 arr 선언)
//        int[] arr; ; // ✅ (1) 배열을 선언합니다.

        /// 2. 배열 길이 할당
//        arr = new int[5];
        // arr = [] [] [] [] []
        // 배열 길이 5로 할당

        /// 3. 배열 선언과 길이 동시에 할당
        // 배열 선언과 배열 길이  설정은 같은 줄에 할 수도 있다.
//        int[] arr = new int[5];
        // arr = [] [] [] [] [] < 빈 공간

        /// 4. 배열 선언과 동시에 배열의 요소 할당
//        int[] arr = {10, 20, 30, 40, 50};
        // [10] [20] [30] [40] [50]

        // 배열 길이는 배열에 들어갈 데이터의 개수
//        int arrLength = arr.length;
//        System.out.println("arrLength = " + arrLength); // arrLength = 5

        ///  배열 살펴보기
        // int[] arr = new int[5]
        // int 자료형은 4바이트 크기의 자료형.
        // 배열 길이가 5인 int 자료형 배열은 메모리에서 20바이트 크기를 가진다 (4바이트 * 5길이 = 20바이트)


        /// 문자열 배열 선언
        // 길이가 5인 문자열 배열 arrA 를 선언
        String[] arrA = new String[5];
        // [""] [""] [""] [""] [""]

        /// 논리형 배열 선언
        // 길이가 3인 논리형 배열 arrB 를 선언
        boolean[] arrB = new boolean[3];
        // [true] [true] [true]



        ///  배열의 요소(Array element)
        // 배열의 요소 는 배열 안에 들어있는 각각의 값 이다.
        // 배열 선언과 동시에 배열의 요소를 설정할 수 있다.
//        int[] arr = {10, 20, 30, 40, 50}; // ✅ 배열 선언과 동시에 배열의요소 설정


        ///  인덱스 (index) - 배열의 요소에 접근하는 방법
        // 각 배열의 요소에 접근하려면 인덱스를 이해해야 합니다.
        // index의 시작 0
        // 인덱스를 통해 원하는 배열의 요소에 빠르게 접근할 수 있다.

        int[] arr = {10, 20, 30, 40, 50};
        //          [0] [1] [2] [3] [4]
        System.out.println("배열의 1번째 요소 = " + arr[0]); // 10
        System.out.println("배열의 2번째 요소 = " + arr[1]); // 20
        System.out.println("배열의 3번째 요소 = " + arr[2]); // 30
        System.out.println("배열의 4번째 요소 = " + arr[3]); // 40
        System.out.println("배열의 5번째 요소 = " + arr[4]); // 50

        ///  인덱스를 사용할 때 주의 사항
        // Q. 배열의 범위에 벗어난 요소에 접근하려고 하면 어떻게 될까요?
        // A. - `ArrayIndexOutOfBoundsException` 에러가 발생합니다.
        //- 인덱스(index) 를 활용할 때는 배열의 범위를 벗어나지 않게 주의해야 합니다.
//        int[] arr = {10, 20, 30, 40, 50}; // 5개의 길이를 가진 배열
//        System.out.println("배열의 6번째 요소 = " + arr[5]); // ❌ 에러 발생

        ///  배열에 정보 삽입 수정
        // 인덱스(index) 를 활용해 각 요소의 값을 삽입 수정할 수 있습니다.
//        int[] arr = new int[5];
        arr[0] = 100; // ✅ 1번째 요소를 100로 설정
        arr[1] = 200; // ✅ 2번째 요소를 200로 설정
        arr[2] = 300; // ✅ 3번째 요소를 300로 설정
        arr[3] = 400; // ✅ 4번째 요소를 400로 설정
        arr[4] = 500; // ✅ 5번째 요소를 500로 설정
//        arr[5] = 600; // ❌ 접근 불가

        System.out.println("배열의 1번째 요소는 0번째 인덱스: " + arr[0]); // 100
        System.out.println("배열의 2번째 요소는 1번째 인덱스: " + arr[1]); // 200
        System.out.println("배열의 3번째 요소는 2번째 인덱스: " + arr[2]); // 300
        System.out.println("배열의 4번째 요소는 3번째 인덱스: " + arr[3]); // 400
        System.out.println("배열의 5번째 요소는 4번째 인덱스: " + arr[4]); // 500
        // 0     1      2     3      4
        // [100] [200] [300] [400] [500]
        System.out.println(arr[4]); // 인덱스에서 4번째 요소 선택 500

        ///  배열 탐색
        // 인덱스(index) 를 활용해 배열을 탐색할 수 있습니다.
        // 변수를 인덱스(index) 로 활용한다면 반복문을 통해 쉽게 배열을 탐색할 수 있습니다.

        for (int i = 0; i < arr.length; i++) {
            //시작조건;  종결조건;      조건 변화 수식
            //arr.length 는 배열의 길이
            // ✅ 숫자대신 변수i 를 인덱스 활용
            // i = 0;
            // i = 1;
            // i = 2;
            // i = 3;
            // i = 4;
            // i = 5; ❌ 접근 불가
            System.out.println("인덱스: " + i + ", 값: " + arr[i]);
            // ("numbers[" + i + "] = " + arr[i]) 를 ("인덱스: " + i + ", 값: " + arr[i]) 로 대치
        }

        ///  향상된  for 문 = 현업에서 많이 활용
        // 향상된 for 문 이란?
        //- 배열의 모든 요소를 하나씩 꺼내서 활용할 때 편리한 반복문 입니다.
        //- `index` 직접 활용하지 못합니다.
        //- `for (int a : arr)` → 배열 arr 에서 하나씩 꺼내서 a 에 저장
        //- `IndexOutOfBoundsException` 에러가 발생하지 않습니다.

        // 기존 for 문 구조
        ///  for 반복문 구조
        // for (시작조건; 종결조건; 조건변화수식) {
        // ...
        // }

        ///  향상된 for 문 구조
//        for(배열의요소 : 배열) {
//            명령문;
//        }

        /// 향상된 for 문 구조 활용
        // int[] arr = {100, 200, 300, 400, 500};
        for (int a : arr) {
            System.out.println("배열의 각 요소 = " + a);
        }

        /// 2차원 배열(Two-Dimensional Array)
        // 2차원 배열이란
        //- 2차원배열은 2차원적인 정보를 표현할 때 적합합니다.
        //- 첫 번째 인덱스는 `행` = `가로` 방향을 의미합니다.
        //- 두 번째 인덱스는 `열` = `세로` 방향을 의미합니다.
        //- 좌표, 위치 정보(x, y) 등..

        ///  2차원 배열 선언 방법
//        boolean[][] board = new boolean[2][2]; // ✅ 2 x 2 2차원 배열 선언  [행:가로] [열:세로]
        boolean[][] board = {
                {true, false}, // 0행의 0열, 0행의 1열,
                {false, true}  // 1행의 0열, 1행의 1열
        };
        System.out.println(board[0][0]); // true 까만돌
        System.out.println(board[0][1]); // false 흰돌
        System.out.println(board[1][0]); // false 흰돌
        System.out.println(board[1][1]); // true 까만돌
    }
}
