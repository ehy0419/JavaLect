package org.example.week1.loop8;

public class Lect8 {
    public static void main(String[] args) {

        /// 학습 키워드
        //- [ ]  for - 조건과 증감식을 포함한 반복문
        //    - [ ]  break - 반복문을 즉시 종료
        //    - [ ]  while - 조건이 참인 동안 반복
        //- [ ]  while - 조건이 참이면 반복 실행
        //- [ ]  do-while - 최소 한 번 실행 후 조건 검사

        ///  반복문
        // 로봇한테 10번 인사 반복 시키기
//        System.out.println("안녕하세요!");
//        ....
//        System.out.println("안녕하세요!");

        // 따라서, 반복문은 일정한 형태의 작업을 반복적으로 수행해야 할 때 필요한 것이 반복문
        // 반복문을 사용하면 단 한 줄로 해결 가능하다.

        ///  for 반복문 구조
        // for (시작조건; 종결조건; 조건변화수식) {
		// ...
        // }

//        for (int i = 1; i <= 10; i++) {
//            System.out.println("안녕하세요!");
//        }

        // int i = 1;   시작조건        > 시작 조건은 1이고
        // i <= 10;     종결조건        > 시작 조건이 10과 같아질 때까지 반복하라
        // i++          조건 변화 수식   > 반복마다 i 는 1씩 증가

        /// for 문 활용 내용은 Robot 클래스 확인


        /// while 문
        //- `while` 반복문은 종결조건만 가지고 있습니다.
        //- 종결조건식이 `true` 일때 반복합니다.
        //- 즉 종결조건이 거짓(`false`)이 될때까지 명령문을 반복합니다.
        //→ 무한루프를 조심해야합니다.

        /// while 문의 구조
        //while (종결조건) { - 종결조건은   true 일때만 반복, false가 나오면 중단.
        //     반복할 명령문;
        //}
        // 종결조건을 false 로 만드는 수식을 만들어야 무한루프에 안 빠진다.

//        int i = 1;        // <- 시작조건 |
//        while (i <= 10) { // <- 종결조건 | 1은 10보다 작음, 그리고 조건변화가 없으므로 무한반복
//            System.out.println("i 가 10 보다 작습니다.");
//            i++;          // <- 조건변화수식   이 없을 경우 무한루프 발생
//        }

        /// do-while 문
        //- `do-while` 은 `while` 문과 비슷하지만 종결조건을 반복 전이 아니라 후에 체크한다는 점입니다.

        /// `do-while` 문의 구조
        //do {
        //		반복할 명령문..
        //} while (종결 조건)

        int i = 1;                              // 1. 시작조건
        do {
            System.out.println("안녕하세요.");
            i++;                                //3. 조건변화수식
        } while (i <= 10);                      //2 종결 조건
    }
}
